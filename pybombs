#!/usr/bin/env python
#
# Copyright 2013 Tim O'Shea
#
# This file is part of PyBOMBS
#
# PyBOMBS is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# PyBOMBS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PyBOMBS; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

import os,re,sys;
from optparse import OptionParser

USAGE="""Python Build Overlay Managed Bundle Systems - CLI
%prog [options] COMMAND [args]

Operations:"
    help            - show this screen
    list            - show installed & available packages
    info <pkg>      - display package info
    install <pkg>   - install a package
    remove          - cleanly remove all fully installed packages and dependents
    remove <pkg>    - cleanly remove a fully installed package and dependents
    rnd <pkg>       - cleanly remove a fully installed package (*DANGER* can break dependees!)
    clean <pkg>     - ensure a package is in the uninstalled state
    config          - show all local config settings
    config <k>      - show one local config setting
    config <k> <v>  - set a local config setting
    reconfig        - reconfigure all local settings
    inv             - show inventory values
    inv <k>         - clear inventory value for k
    inv <k> <v>     - update local package k inventory value to v
    digraph         - write out package.dot digraph for graphviz (accepts --all to include all pkgs)
    env             - write out env
    update          - update all packages
    update <pkg>    - update a specific package
    rb <pkg>        - rebuild without re-fetch (equivalent to [inv pkg fetch && install pkg])
    fetch <pkg>     - fetch a package without building or checking dependencies
    search <expr>   - search for a package recipe matching <expr>
    profile         - run volk profile
"""

parser = OptionParser(USAGE)
parser.add_option("-c", "--continue", dest="_continue", default=False, action="store_true", help="Attempt to continue in-spite of failures")
parser.add_option("-f", "--force", default=False, action="store_true", help="Force operation to occur")
parser.add_option("-a", "--all", default=False, action="store_true", help="Apply operation to all packages")
opts,args = parser.parse_args()

"""
Catch-all in case pybombs was invoked with no argument / command
"""
if(len(args) == 0):
    parser.print_help()
    print "error: You must provide a command."
    sys.exit(-1)

cmd = args.pop(0)

"""
Handle commands the con't require loading the PyBombs modules & subsytem.
"""
if(cmd == "help"):
    parser.print_help()
    sys.exit(0)
    print "error: You must provide a command."
    sys.exit(-1)

elif(cmd == "moo"):
    print "         (__)    "
    print "         (oo)    "
    print "   /------\/     "
    print "  / |    ||      "
    print " *  /\---/\      "
    print "    ~~   ~~      "
    print "....\"Have you mooed today?\"..."
    sys.exit(0)


"""
Load the PyBomb modules & subsystem. 
"""
# remove this for deployment
files = os.listdir("mod_pybombs");
for f in files:
    if(re.match("\w+.pyc", f)):
        os.unlink("mod_pybombs/" + f)
# remove this for deployment

from mod_pybombs import *
print "---------- loading recipes -------------------"
recipe_loader.load_all()
print "---------- loading recipes finished ----------\n"

if(cmd == "search"):
    st = " ".join(args)
    print "Searching for packages matching: " + st;
    pkg_search(st);

elif(cmd == "list"):
    print "Printing recipe status list:"
    pkglist()
    print ""

elif(cmd == "env"):
    print "Writing out env...:"
    writeenv()

elif(cmd == "install"):
    if(len(args) == 0):
        parser.error("Command 'install' requires at least one package")
    else:
        for p in args:
            install(p, not opts.force);

elif(cmd == "update"):
    if(len(args) == 0):
        update();
    else:
        update(args)

elif(cmd == "rb"):
    if(len(args) == 0):
        parser.error("Command 'rb' requires at least one package")
    else:
        for x in args: inventory_set(x, "fetch")
        for x in args: install(x,True)

elif(cmd == "remove" or cmd == "rm" or cmd == "uninstall"):
    if(len(args) == 0):
        confirm = sysutils.confirm("Really remove all installed packages?", default="N")
        if(confirm):
            remove()
        else:
            print "Operation cancelled!"
            sys.exit(0)
    else:
        remove(args)

elif(cmd == "rnd"):
    if(len(args) == 0):
        parser.error("Command 'rnd' requires at least one package")
    else:
        remove_nd(args)

elif(cmd == "clean" or cmd== "reset"):
    if(len(args) == 0):
        parser.error("Command 'clean' requires at least one package")
    else:
        clean(args)

elif(cmd == "digraph"):
    graphviz(not opts.all)

elif(cmd == "info"):
    if(len(args) == 0):
        parser.error("Command 'info' requires at least one package")
    else:
        for a in args: pkginfo(a) 

elif(cmd == "config"):
    if(len(args) == 0):
        config_print()
    elif(len(args) == 1):
        config_get(args[0])
    elif(len(args) == 2):
        config_set(args[0], args[1])
    else:
        parser.error("Command 'config' accepts at most 2 arguments")

elif(cmd == "reconfig"):
    config = ConfigParser.RawConfigParser()
    config_init(config, True)
    config_write(config)
    sys.exit(0)

elif(cmd == "inv"):
    if(len(args) == 0):
        inv.show()
    elif(len(args) == 1):
        inventory_set(args[0], None)
    elif(len(args) == 2):
        inventory_set(args[0], args[1])
    else:
        parser.error("Command 'inv' accepts at most 2 arguments")

elif(cmd == "fetch"):
    if(len(args) == 0):
        parser.error("Command 'fetch' requires at least one package")
    else:
        for p in args:
            fetch(p, not opts.force, opts._continue);

elif(cmd == "profile"):

    run_volk_profile();

else:
    parser.error("Command '%s' is not a valid command" % cmd )


